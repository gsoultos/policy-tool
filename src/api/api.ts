/* tslint:disable */
/* eslint-disable */
/**
 * Policy Tool Service
 * Policy Tool Service Swagger Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: soultos@protonmail.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdviceExpression
 */
export interface AdviceExpression {
    /**
     * Attribute assignment expressions
     * @type {Array<AttributeAssignmentExpression>}
     * @memberof AdviceExpression
     */
    attributeAssignmentExpressions: Array<AttributeAssignmentExpression>;
    /**
     * Advice ID
     * @type {string}
     * @memberof AdviceExpression
     */
    adviceId: string;
    /**
     * Applies to
     * @type {string}
     * @memberof AdviceExpression
     */
    appliesTo: AdviceExpressionAppliesToEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AdviceExpressionAppliesToEnum {
    Permit = 'PERMIT',
    Deny = 'DENY'
}

/**
 * Can be null
 * @export
 * @interface AdviceExpressions
 */
export interface AdviceExpressions {
    /**
     * Advice expressions
     * @type {Array<AdviceExpression>}
     * @memberof AdviceExpressions
     */
    adviceExpressions: Array<AdviceExpression>;
}
/**
 * 
 * @export
 * @interface AllOf
 */
export interface AllOf {
    /**
     * Matches
     * @type {Array<Match>}
     * @memberof AllOf
     */
    matches: Array<Match>;
}
/**
 * 
 * @export
 * @interface AnyOf
 */
export interface AnyOf {
    /**
     * All oves
     * @type {Array<AllOf>}
     * @memberof AnyOf
     */
    allOves: Array<AllOf>;
}
/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * Attribute values
     * @type {Array<AttributeValueType>}
     * @memberof Attribute
     */
    attributeValues: Array<AttributeValueType>;
    /**
     * Attribute ID
     * @type {string}
     * @memberof Attribute
     */
    attributeId: string;
    /**
     * Issuer
     * @type {string}
     * @memberof Attribute
     */
    issuer: string;
    /**
     * Include in result
     * @type {boolean}
     * @memberof Attribute
     */
    includeInResult: boolean;
}
/**
 * 
 * @export
 * @interface AttributeAssignmentExpression
 */
export interface AttributeAssignmentExpression {
    /**
     * Expression. Can be null
     * @type {string}
     * @memberof AttributeAssignmentExpression
     */
    expression: string;
    /**
     * Attribute ID
     * @type {string}
     * @memberof AttributeAssignmentExpression
     */
    attributeId: string;
    /**
     * Category
     * @type {string}
     * @memberof AttributeAssignmentExpression
     */
    category: string;
    /**
     * Issuer
     * @type {string}
     * @memberof AttributeAssignmentExpression
     */
    issuer: string;
}
/**
 * 
 * @export
 * @interface AttributeDesignatorType
 */
export interface AttributeDesignatorType {
    /**
     * Category
     * @type {string}
     * @memberof AttributeDesignatorType
     */
    category: string;
    /**
     * Attribute ID
     * @type {string}
     * @memberof AttributeDesignatorType
     */
    attributeId: string;
    /**
     * Data type
     * @type {string}
     * @memberof AttributeDesignatorType
     */
    dataType: string;
    /**
     * Issuer
     * @type {string}
     * @memberof AttributeDesignatorType
     */
    issuer: string;
    /**
     * Must be present
     * @type {boolean}
     * @memberof AttributeDesignatorType
     */
    mustBePresent: boolean;
}
/**
 * Can be null
 * @export
 * @interface AttributeSelectorType
 */
export interface AttributeSelectorType {
    /**
     * Category
     * @type {string}
     * @memberof AttributeSelectorType
     */
    category: string;
    /**
     * Context selector ID
     * @type {string}
     * @memberof AttributeSelectorType
     */
    contextSelectorId: string;
    /**
     * Path
     * @type {string}
     * @memberof AttributeSelectorType
     */
    path: string;
    /**
     * Data type
     * @type {string}
     * @memberof AttributeSelectorType
     */
    dataType: string;
    /**
     * Must be present
     * @type {boolean}
     * @memberof AttributeSelectorType
     */
    mustBePresent: boolean;
}
/**
 * 
 * @export
 * @interface AttributeValueType
 */
export interface AttributeValueType {
    /**
     * Content
     * @type {Array<string>}
     * @memberof AttributeValueType
     */
    content: Array<string>;
    /**
     * Data type
     * @type {string}
     * @memberof AttributeValueType
     */
    dataType: string;
    /**
     * Other attributes. Can be null
     * @type {{ [key: string]: string; }}
     * @memberof AttributeValueType
     */
    otherAttributes: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Content
 */
export interface Content {
    /**
     * Content
     * @type {Array<string>}
     * @memberof Content
     */
    content: Array<string>;
}
/**
 * Can be null
 * @export
 * @interface DefaultsType
 */
export interface DefaultsType {
    /**
     * X path version
     * @type {string}
     * @memberof DefaultsType
     */
    xPathVersion: string;
}
/**
 * 
 * @export
 * @interface Match
 */
export interface Match {
    /**
     * 
     * @type {AttributeValueType}
     * @memberof Match
     */
    attributeValue: AttributeValueType;
    /**
     * 
     * @type {AttributeSelectorType}
     * @memberof Match
     */
    attributeSelector: AttributeSelectorType;
    /**
     * 
     * @type {AttributeDesignatorType}
     * @memberof Match
     */
    attributeDesignator: AttributeDesignatorType;
    /**
     * Match ID
     * @type {string}
     * @memberof Match
     */
    matchId: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Timestamp
     * @type {string}
     * @memberof ModelError
     */
    timestamp: string;
    /**
     * HTTP status
     * @type {number}
     * @memberof ModelError
     */
    status: number;
    /**
     * HTTP error message
     * @type {string}
     * @memberof ModelError
     */
    error: string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * 
 * @export
 * @interface ObligationExpression
 */
export interface ObligationExpression {
    /**
     * Attribute assignment expressions
     * @type {Array<AttributeAssignmentExpression>}
     * @memberof ObligationExpression
     */
    attributeAssignmentExpressions: Array<AttributeAssignmentExpression>;
    /**
     * Obligation ID
     * @type {string}
     * @memberof ObligationExpression
     */
    obligationId: string;
    /**
     * Fulfill on
     * @type {string}
     * @memberof ObligationExpression
     */
    fulfillOn: ObligationExpressionFulfillOnEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ObligationExpressionFulfillOnEnum {
    Permit = 'PERMIT',
    Deny = 'DENY'
}

/**
 * Can be null
 * @export
 * @interface ObligationExpressions
 */
export interface ObligationExpressions {
    /**
     * Obligation expressions
     * @type {Array<ObligationExpression>}
     * @memberof ObligationExpressions
     */
    obligationExpressions: Array<ObligationExpression>;
}
/**
 * 
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * Description
     * @type {string}
     * @memberof Policy
     */
    description: string;
    /**
     * 
     * @type {PolicyIssuer}
     * @memberof Policy
     */
    policyIssuer: PolicyIssuer;
    /**
     * 
     * @type {DefaultsType}
     * @memberof Policy
     */
    policyDefaults: DefaultsType;
    /**
     * 
     * @type {Target}
     * @memberof Policy
     */
    target: Target;
    /**
     * Combiner parameters and rule combiner parameters and variable definitions.
     * @type {Array<Rule>}
     * @memberof Policy
     */
    combinerParametersAndRuleCombinerParametersAndVariableDefinitions: Array<Rule>;
    /**
     * 
     * @type {ObligationExpressions}
     * @memberof Policy
     */
    obligationExpressions: ObligationExpressions;
    /**
     * 
     * @type {AdviceExpressions}
     * @memberof Policy
     */
    adviceExpressions: AdviceExpressions;
    /**
     * Policy ID
     * @type {string}
     * @memberof Policy
     */
    policyId: string;
    /**
     * Version
     * @type {string}
     * @memberof Policy
     */
    version: string;
    /**
     * Rule combining algorithm ID
     * @type {string}
     * @memberof Policy
     */
    ruleCombiningAlgId: string;
    /**
     * Max delegation depth
     * @type {number}
     * @memberof Policy
     */
    maxDelegationDepth: number;
}
/**
 * Can be null
 * @export
 * @interface PolicyIssuer
 */
export interface PolicyIssuer {
    /**
     * 
     * @type {Content}
     * @memberof PolicyIssuer
     */
    content: Content;
    /**
     * Attributes
     * @type {Array<Attribute>}
     * @memberof PolicyIssuer
     */
    attributes: Array<Attribute>;
}
/**
 * 
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * Description
     * @type {string}
     * @memberof Rule
     */
    description: string;
    /**
     * 
     * @type {Target}
     * @memberof Rule
     */
    target: Target;
    /**
     * Condition
     * @type {string}
     * @memberof Rule
     */
    condition: string;
    /**
     * Obligation expressions
     * @type {Array<string>}
     * @memberof Rule
     */
    obligationExpressions: Array<string>;
    /**
     * Advice expressions
     * @type {Array<string>}
     * @memberof Rule
     */
    adviceExpressions: Array<string>;
    /**
     * Rule ID
     * @type {string}
     * @memberof Rule
     */
    ruleId: string;
    /**
     * Effect
     * @type {string}
     * @memberof Rule
     */
    effect: RuleEffectEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RuleEffectEnum {
    Permit = 'PERMIT',
    Deny = 'DENY'
}

/**
 * 
 * @export
 * @interface Target
 */
export interface Target {
    /**
     * Any oves
     * @type {Array<AnyOf>}
     * @memberof Target
     */
    anyOves: Array<AnyOf>;
}

/**
 * ABACApi - axios parameter creator
 * @export
 */
export const ABACApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add ABAC Policy
         * @param {Policy} policy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addABACPolicy: async (policy: Policy, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policy' is not null or undefined
            assertParamExists('addABACPolicy', 'policy', policy)
            const localVarPath = `/abac`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policy, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete ABAC Policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteABACPolicy: async (policyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('deleteABACPolicy', 'policyId', policyId)
            const localVarPath = `/abac/{policyId}`
                .replace(`{${"policyId"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ABAC policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getABACPolicies: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/abac`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ABAC Policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getABACPolicy: async (policyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('getABACPolicy', 'policyId', policyId)
            const localVarPath = `/abac/{policyId}`
                .replace(`{${"policyId"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ABACApi - functional programming interface
 * @export
 */
export const ABACApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ABACApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add ABAC Policy
         * @param {Policy} policy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addABACPolicy(policy: Policy, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addABACPolicy(policy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete ABAC Policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteABACPolicy(policyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteABACPolicy(policyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ABAC policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getABACPolicies(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Policy; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getABACPolicies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ABAC Policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getABACPolicy(policyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getABACPolicy(policyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ABACApi - factory interface
 * @export
 */
export const ABACApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ABACApiFp(configuration)
    return {
        /**
         * 
         * @summary Add ABAC Policy
         * @param {Policy} policy 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addABACPolicy(policy: Policy, options?: any): AxiosPromise<void> {
            return localVarFp.addABACPolicy(policy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete ABAC Policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteABACPolicy(policyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteABACPolicy(policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ABAC policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getABACPolicies(options?: any): AxiosPromise<{ [key: string]: Policy; }> {
            return localVarFp.getABACPolicies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ABAC Policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getABACPolicy(policyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getABACPolicy(policyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ABACApi - object-oriented interface
 * @export
 * @class ABACApi
 * @extends {BaseAPI}
 */
export class ABACApi extends BaseAPI {
    /**
     * 
     * @summary Add ABAC Policy
     * @param {Policy} policy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABACApi
     */
    public addABACPolicy(policy: Policy, options?: any) {
        return ABACApiFp(this.configuration).addABACPolicy(policy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete ABAC Policy
     * @param {string} policyId Policy ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABACApi
     */
    public deleteABACPolicy(policyId: string, options?: any) {
        return ABACApiFp(this.configuration).deleteABACPolicy(policyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ABAC policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABACApi
     */
    public getABACPolicies(options?: any) {
        return ABACApiFp(this.configuration).getABACPolicies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ABAC Policy
     * @param {string} policyId Policy ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABACApi
     */
    public getABACPolicy(policyId: string, options?: any) {
        return ABACApiFp(this.configuration).getABACPolicy(policyId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new attribute in category
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {Attribute} attribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttribute: async (category: 'act' | 'env' | 'rsc' | 'subj', attribute: Attribute, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('addAttribute', 'category', category)
            // verify required parameter 'attribute' is not null or undefined
            assertParamExists('addAttribute', 'attribute', attribute)
            const localVarPath = `/category/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attribute, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a category attribute
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {string} attributeId Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute: async (category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('deleteAttribute', 'category', category)
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('deleteAttribute', 'attributeId', attributeId)
            const localVarPath = `/category/{category}/{attributeId}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)))
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a category attribute
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {string} attributeId Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttribute: async (category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('getAttribute', 'category', category)
            // verify required parameter 'attributeId' is not null or undefined
            assertParamExists('getAttribute', 'attributeId', attributeId)
            const localVarPath = `/category/{category}/{attributeId}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)))
                .replace(`{${"attributeId"}}`, encodeURIComponent(String(attributeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get attributes for a category
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes: async (category: 'act' | 'env' | 'rsc' | 'subj', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('getAttributes', 'category', category)
            const localVarPath = `/category/{category}`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new attribute in category
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {Attribute} attribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attribute: Attribute, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAttribute(category, attribute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a category attribute
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {string} attributeId Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttribute(category, attributeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a category attribute
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {string} attributeId Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttribute(category, attributeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get attributes for a category
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributes(category: 'act' | 'env' | 'rsc' | 'subj', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Attribute; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributes(category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new attribute in category
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {Attribute} attribute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attribute: Attribute, options?: any): AxiosPromise<void> {
            return localVarFp.addAttribute(category, attribute, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a category attribute
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {string} attributeId Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAttribute(category, attributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a category attribute
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {string} attributeId Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options?: any): AxiosPromise<Attribute> {
            return localVarFp.getAttribute(category, attributeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get attributes for a category
         * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(category: 'act' | 'env' | 'rsc' | 'subj', options?: any): AxiosPromise<{ [key: string]: Attribute; }> {
            return localVarFp.getAttributes(category, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @summary Add new attribute in category
     * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
     * @param {Attribute} attribute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public addAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attribute: Attribute, options?: any) {
        return CategoryApiFp(this.configuration).addAttribute(category, attribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a category attribute
     * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
     * @param {string} attributeId Attribute ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public deleteAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options?: any) {
        return CategoryApiFp(this.configuration).deleteAttribute(category, attributeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a category attribute
     * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
     * @param {string} attributeId Attribute ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getAttribute(category: 'act' | 'env' | 'rsc' | 'subj', attributeId: string, options?: any) {
        return CategoryApiFp(this.configuration).getAttribute(category, attributeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get attributes for a category
     * @param {'act' | 'env' | 'rsc' | 'subj'} category Category name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getAttributes(category: 'act' | 'env' | 'rsc' | 'subj', options?: any) {
        return CategoryApiFp(this.configuration).getAttributes(category, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Export poject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportData: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load project
         * @param {string} exportedData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData: async (exportedData: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportedData' is not null or undefined
            assertParamExists('loadData', 'exportedData', exportedData)
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportedData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Export poject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load project
         * @param {string} exportedData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadData(exportedData: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadData(exportedData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Export poject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportData(options?: any): AxiosPromise<string> {
            return localVarFp.exportData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load project
         * @param {string} exportedData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData(exportedData: string, options?: any): AxiosPromise<void> {
            return localVarFp.loadData(exportedData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Export poject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public exportData(options?: any) {
        return ProjectApiFp(this.configuration).exportData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load project
     * @param {string} exportedData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public loadData(exportedData: string, options?: any) {
        return ProjectApiFp(this.configuration).loadData(exportedData, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * XACMLApi - axios parameter creator
 * @export
 */
export const XACMLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate ABAC policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateABACPolicy: async (policyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('generateABACPolicy', 'policyId', policyId)
            const localVarPath = `/xacml/abac/{policyId}`
                .replace(`{${"policyId"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate XACML request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXACMLRequest: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/xacml/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XACMLApi - functional programming interface
 * @export
 */
export const XACMLApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = XACMLApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generate ABAC policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateABACPolicy(policyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateABACPolicy(policyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate XACML request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateXACMLRequest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateXACMLRequest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * XACMLApi - factory interface
 * @export
 */
export const XACMLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = XACMLApiFp(configuration)
    return {
        /**
         * 
         * @summary Generate ABAC policy
         * @param {string} policyId Policy ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateABACPolicy(policyId: string, options?: any): AxiosPromise<string> {
            return localVarFp.generateABACPolicy(policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate XACML request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXACMLRequest(options?: any): AxiosPromise<string> {
            return localVarFp.generateXACMLRequest(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * XACMLApi - object-oriented interface
 * @export
 * @class XACMLApi
 * @extends {BaseAPI}
 */
export class XACMLApi extends BaseAPI {
    /**
     * 
     * @summary Generate ABAC policy
     * @param {string} policyId Policy ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XACMLApi
     */
    public generateABACPolicy(policyId: string, options?: any) {
        return XACMLApiFp(this.configuration).generateABACPolicy(policyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate XACML request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XACMLApi
     */
    public generateXACMLRequest(options?: any) {
        return XACMLApiFp(this.configuration).generateXACMLRequest(options).then((request) => request(this.axios, this.basePath));
    }
}


